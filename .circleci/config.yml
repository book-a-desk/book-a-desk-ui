version: 2.1

orbs:
  node: circleci/node@3.0.0
  aws-cli: circleci/aws-cli@1.3.0
  aws-s3: circleci/aws-s3@1.0.16
  
parameters:
  s3-bucket-dev:
      type: string
      default: book-a-desk-ui-2
  acm-certificate-id-dev:
      type: string
      default: ${ACM_CERTIFICATE_ID_DEV}
  cloudformation-role-dev:
      type: string
      default: arn:aws:iam::${AWS_ACCOUNT_DEV}:role/cloudformationstackdev
  domain-name-alias-dev:
      type: string
      default: ${DOMAIN_NAME_ALIAS_DEV}
  s3-bucket-test:
      type: string
      default: book-a-desk-ui-test
  acm-certificate-id-test:
      type: string
      default: ${ACM_CERTIFICATE_ID_TEST}
  cloudformation-role-test:
      type: string
      default: arn:aws:iam::${AWS_ACCOUNT_TEST}:role/cloudformationstacktest
  domain-name-alias-test:
    type: string
    default: ${DOMAIN_NAME_ALIAS_TEST}
  s3-bucket-prod:
    type: string
    default: book-a-desk-ui-prod
  acm-certificate-id-prod:
    type: string
    default: ${ACM_CERTIFICATE_ID_PROD}
  cloudformation-role-prod:
    type: string
    default: arn:aws:iam::${AWS_ACCOUNT_PROD}:role/cloudformationstackprod
  domain-name-alias-prod:
    type: string
    default: ${DOMAIN_NAME_ALIAS_PROD}
      
commands:
  log-aws-identity:
    parameters:
      profile:
        type: string
        default: ""
    steps:
      - run:
          name: Log AWS identity <<# parameters.profile >>(profile=<< parameters.profile >>)<</ parameters.profile >>
          command: aws sts get-caller-identity <<# parameters.profile >> --profile << parameters.profile >> <</ parameters.profile >> --region $AWS_REGION || true
  authenticate-aws-book-a-desk-dev:
    description: "Configure AWS credentials for Book A Desk Dev"
    steps:
      - run:
          name: "Initialize BASH_ENV variables"
          command: |
            echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID_DEV}" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY_DEV}" >> $BASH_ENV
            echo $AWS_SECRET_ACCESS_KEY_ID
  authenticate-aws-book-a-desk-test:
    description: "Configure AWS credentials for Book A Desk Test"
    steps:
      - run:
          name: "Initialize BASH_ENV variables"
          command: |
            echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID_TEST}" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY_TEST}" >> $BASH_ENV
  authenticate-aws-book-a-desk-prod:
    description: "Configure AWS credentials for Book A Desk Prod"
    steps:
      - run:
          name: "Initialize BASH_ENV variables"
          command: |
            echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID_PROD}" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY_PROD}" >> $BASH_ENV
            
  aws-cloudformation-deploy:
    parameters:
      update-cdn:
        type: boolean
        default: false
      authenticate-aws:
        type: steps
      s3-bucket-name:
        type: string
      certificate-id:
        type: string
      alias:
        type: string
      cloudformation-role:
        type: string
    steps:
      - steps: << parameters.authenticate-aws >>
      - log-aws-identity
      - run:
          name: Ensure infrastructure is up to date <<# parameters.update-cdn >>and update the CDN origin<</ parameters.update-cdn >>
          command: |
            aws cloudformation deploy \
              --parameter-overrides "S3Bucket=<< parameters.s3-bucket-name >>" "CertificateID=<< parameters.certificate-id >>" "Alias=<< parameters.alias >>" <<# parameters.update-cdn >>"SHA1=${CIRCLE_SHA1}"<</ parameters.update-cdn >> \
              --stack-name book-a-desk-ui \
              --template-file ./infra/cf.yaml \
              --capabilities CAPABILITY_NAMED_IAM \
              --role-arn << parameters.cloudformation-role >>
  

jobs:
  build-and-unit-test:
    docker:
      - image: cimg/node:16.15.0
    resource_class: small
    parameters:
      api-url:
        type: string
      base-url:
        type: string
    steps:
      - checkout
      - restore_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}
      - run:
          name: Install npm packages
          command: npm install
      - save_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Unit test
          command: |
            export VUE_APP_DOMAIN_NAME=$BOOK_A_DESK_DOMAIN_NAME
            npm run test:unit:ci
          environment:
            JEST_JUNIT_OUTPUT_NAME: ./reports/unit-tests.xml
      - run:
          name: Build
          command: |
            export VUE_APP_BASE_API_URL=<< parameters.api-url >>
            export VUE_APP_BASE_URL=<< parameters.base-url >>
            export VUE_APP_CLIENTID=${OKTA_CLIENTID}
            export VUE_APP_DOMAIN_NAME=$BOOK_A_DESK_DOMAIN_NAME
            npm run build
      - store_test_results:
          path: ./reports/
      - persist_to_workspace:
          root: ./dist
          paths:
            - ./*
              
  chromatic-deployment:
    docker:
      - image: circleci/node:16.15.0
    resource_class: small
    parameters:
      project-token:
        type: string
    steps:
      - checkout
      - restore_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}
      - run:
          name: Install npm packages
          command: npm install
      - save_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run: npm run chromatic --project-token=<< parameters.project-token >>

  deploy-cloudformation:
    executor: aws-cli/default
    parameters:
      update-cdn:
        type: boolean
        default: false
      authenticate-aws:
        type: steps
      s3-bucket-name:
        type: string
      certificate-id:
        type: string
      alias:
        type: string
      cloudformation-role:
        type: string
    steps:
      - checkout
      - aws-cli/setup:
          aws-region: AWS_REGION
      - aws-cloudformation-deploy:
          update-cdn: << parameters.update-cdn >>
          authenticate-aws: << parameters.authenticate-aws >>
          s3-bucket-name: << parameters.s3-bucket-name >>
          certificate-id: << parameters.certificate-id >>
          alias: << parameters.alias >>
          cloudformation-role: << parameters.cloudformation-role >>
          
  publish-to-s3:
    executor: aws-cli/default
    parameters:
      destination-path:
        type: string
      s3-bucket-name:
        type: string
      authenticate-aws:
        type: steps
    steps:
      - attach_workspace:
            at: ./
      - steps: << parameters.authenticate-aws >>
      - aws-cli/setup:
          aws-region: AWS_REGION
      - log-aws-identity
      - run: ls -R
      - aws-s3/sync:
          arguments: --acl public-read
          from: ./
          overwrite: false
          to: s3://<< parameters.s3-bucket-name >>/<< parameters.destination-path >>
          aws-region: AWS_REGION

workflows:
  pull-request:
    unless:
      equal: ['trunk', << pipeline.git.branch >>]
    jobs:
      - build-and-unit-test:
          api-url: ${BOOK_A_DESK_BASE_API_URL_DEV}
          base-url: ${OKTADOMAIN_DEV}
          context:
            - book-a-desk-authentication
      - chromatic-deployment:
          project-token: ${CHROMATIC_PROJECT_TOKEN}
          requires:
            - build-and-unit-test
  release:
    when:
      equal: ['trunk', << pipeline.git.branch >>]
    jobs:
      - build-and-unit-test:
          name: build-dev
          api-url: ${BOOK_A_DESK_BASE_API_URL_DEV}
          base-url: ${OKTADOMAIN_DEV}
          context:
            - book-a-desk-authentication
      - deploy-cloudformation:
          name: deploy-cloudformation-dev
          authenticate-aws:
            - authenticate-aws-book-a-desk-dev
          update-cdn: false
          s3-bucket-name: << pipeline.parameters.s3-bucket-dev >>
          certificate-id: << pipeline.parameters.acm-certificate-id-dev >>
          alias: << pipeline.parameters.domain-name-alias-dev >>
          cloudformation-role: << pipeline.parameters.cloudformation-role-dev >>
          context:
            - aws-credentials
          requires:
            - build-dev
      - publish-to-s3:
          name: publish-to-dev
          destination-path: ${CIRCLE_SHA1}
          s3-bucket-name: << pipeline.parameters.s3-bucket-dev >>
          authenticate-aws:
            - authenticate-aws-book-a-desk-dev
          context:
            - aws-credentials
          requires:
            - build-dev
            - deploy-cloudformation-dev
      - deploy-cloudformation:
          name: update-cloudfront-dev
          authenticate-aws:
            - authenticate-aws-book-a-desk-dev
          update-cdn: true
          s3-bucket-name: << pipeline.parameters.s3-bucket-dev >>
          certificate-id: << pipeline.parameters.acm-certificate-id-dev >>
          alias: << pipeline.parameters.domain-name-alias-dev >>
          cloudformation-role: << pipeline.parameters.cloudformation-role-dev >>
          context:
            - aws-credentials
          requires:
            - publish-to-dev
      - build-and-unit-test:
          name: build-test
          api-url: ${BOOK_A_DESK_BASE_API_URL_TEST}
          base-url: ${OKTADOMAIN_TEST}
          context:
            - book-a-desk-authentication
          requires:
            - update-cloudfront-dev
      - deploy-cloudformation:
          name: deploy-cloudformation-test
          authenticate-aws:
            - authenticate-aws-book-a-desk-test
          update-cdn: false
          s3-bucket-name: << pipeline.parameters.s3-bucket-test >>
          certificate-id: << pipeline.parameters.acm-certificate-id-test >>
          alias: << pipeline.parameters.domain-name-alias-test >>
          cloudformation-role: << pipeline.parameters.cloudformation-role-test >>
          context:
            - aws-credentials
          requires:
            - build-test
      - publish-to-s3:
          name: publish-to-test
          destination-path: ${CIRCLE_SHA1}
          s3-bucket-name: << pipeline.parameters.s3-bucket-test >>
          authenticate-aws:
            - authenticate-aws-book-a-desk-test
          context:
            - aws-credentials
          requires:
            - build-test
            - deploy-cloudformation-test
      - deploy-cloudformation:
          name: update-cloudfront-test
          authenticate-aws:
            - authenticate-aws-book-a-desk-test
          update-cdn: true
          s3-bucket-name: << pipeline.parameters.s3-bucket-test >>
          certificate-id: << pipeline.parameters.acm-certificate-id-test >>
          alias: << pipeline.parameters.domain-name-alias-test >>
          cloudformation-role: << pipeline.parameters.cloudformation-role-test >>
          context:
            - aws-credentials
          requires:
            - publish-to-test
      - production-gate:
          type:
            approval
          requires:
            - update-cloudfront-test
      - build-and-unit-test:
          name: build-prod
          api-url: ${BOOK_A_DESK_BASE_API_URL_PROD}
          base-url: ${OKTADOMAIN_PROD}
          context:
            - book-a-desk-authentication
          requires:
            - production-gate
      - deploy-cloudformation:
          name: deploy-cloudformation-prod
          authenticate-aws:
            - authenticate-aws-book-a-desk-prod
          update-cdn: false
          s3-bucket-name: << pipeline.parameters.s3-bucket-prod >>
          certificate-id: << pipeline.parameters.acm-certificate-id-prod >>
          alias: << pipeline.parameters.domain-name-alias-prod >>
          cloudformation-role: << pipeline.parameters.cloudformation-role-prod >>
          context:
            - aws-credentials
          requires:
            - build-prod
      - publish-to-s3:
          name: publish-to-prod
          destination-path: ${CIRCLE_SHA1}
          s3-bucket-name: << pipeline.parameters.s3-bucket-prod >>
          authenticate-aws:
            - authenticate-aws-book-a-desk-prod
          context:
            - aws-credentials
          requires:
            - build-prod
            - deploy-cloudformation-prod
      - deploy-cloudformation:
          name: update-cloudfront-prod
          authenticate-aws:
            - authenticate-aws-book-a-desk-prod
          update-cdn: true
          s3-bucket-name: << pipeline.parameters.s3-bucket-prod >>
          certificate-id: << pipeline.parameters.acm-certificate-id-prod >>
          alias: << pipeline.parameters.domain-name-alias-prod >>
          cloudformation-role: << pipeline.parameters.cloudformation-role-prod >>
          context:
            - aws-credentials
          requires:
            - publish-to-prod
